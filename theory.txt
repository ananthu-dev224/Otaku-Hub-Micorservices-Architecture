
#Services 

1. Authentication
2. Orders
3. Products

#Gateway - to redirect the requests to diff services based on the endpoints

----- Theory -----

Q. What is monolithic? (old standard way)
All components are part of a single unit.(Only one codebase)
Challenges => Application is too large and complex, parts are more tangled into each other,
if we want to scale we can only scale by entire app, Difficult if diff services require diff dependency,
release process takes longer like CI/CD pipeline in any updation the entire application needs to tested again and rebuild
also if any bug occur the entire app goes down.


Q. What is microservice?
Split based on business functionalities into services
1 service for on specific job
self-contained and independent
loosely coupled
we can develop each service with diff languages 
services can be deployed and fix bugs independently

Q. How can we communicate in microservice?
1 - Using API calls. It is synchronous communication
2 - Using Message Broker. It is a asynchronous communication. Eg:RabbitMQ. Communication is via messages from publisher to subscriber in a queue
3 - Via a Service Mesh(used in Kubernetes).It will kind of have a proxy in each service that contains all the communication logic.
Challenges => complexity in setting up communication btwn services, more difficult to monitor with multiple instances and find
out where the service went down.

CI/CD Pipeline - deployment done in microservice

Monorepo => one repo for all the services, share code and configurations, easier management and share code, tracks easier
challenges faced - if one service in breaked from the main branch it will affect others also, git interactions will
be slower as bcz of large code.
Polyrepo => multiple repo for each service, own pipeline for each repo, debugging and managing gonna be harder.